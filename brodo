#!/usr/bin/env python3

import subprocess
import os

def diff(against :str):
    
    diff_output = subprocess.run(['git', 'diff', against], capture_output=True, text=True).stdout

    # initialize variables to store filename and line number
    filename = ""
    lineno = 0

    for line in diff_output.splitlines():
        if line.startswith("diff --git a/"):
            filename = line.split()[2][2:]
            continue
        
        if line.startswith("@@ "):
            try:
                lineno = int(line.split('+')[1].split(',')[0])
            except Exception as e:
                # print(f"{filename}:{line}", e)
                pass
        
        if line.startswith("+") and ("TODO" in line or "todo" in line):
            content = line[1:].strip()
            print(f"{filename}:{lineno}: {content}")

        if not line.startswith("-"):
            lineno += 1

def branchrefs():
    current_branch = subprocess.run(['git', 'branch', '--show-current'], capture_output=True, text=True).stdout.strip()
    current_branchno = current_branch.split("-")[0]

    for root, _, files in os.walk('.'):
        for file in files:
            file_path = os.path.join(root, file)
            if not file_path.endswith('.go'): 
                continue
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                lines = file.readlines()
                for lineno, line in enumerate(lines, start=1):
                    if current_branchno in line:
                        print(f"{file_path.strip("./")}:{lineno}: {line.strip()}")


def prs():

    # Get the current repository owner and name
    remote_url = subprocess.run(
        ['git', 'config', '--get', 'remote.origin.url'],
        capture_output=True, text=True
    ).stdout.strip()

    # Parse the owner and repository name from the remote URL
    if remote_url.startswith('https://github.com/'):
        owner_repo = remote_url[len('https://github.com/'):].rstrip('.git')
    elif remote_url.startswith('git@github.com:'):
        owner_repo = remote_url[len('git@github.com:'):].rstrip('.git')
    else:
        raise ValueError("Unsupported remote URL format")

    owner, repo = owner_repo.split('/')

    # Get the current branch name
    branch = subprocess.run(
        ['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
        capture_output=True, text=True
    ).stdout.strip()

    # List pull requests for the current branch
    prs_json = subprocess.run(
        [
            'gh', 'api',
            '-H', 'Accept:application/vnd.github+json',
            f"/repos/{owner}/{repo}/pulls?head={owner}:{branch}"
        ],
        capture_output=True,
        text=True,
    ).stdout.strip()

    prs = json.loads(prs_json)

    return owner, repo, prs[0]['number']


import json

# src: https://stackoverflow.com/questions/55713929/list-all-unresolved-pull-request-comments
query = """
    query FetchReviewComments($owner: String!, $repo: String!, $pr: Int!) {
        repository(owner: $owner, name: $repo) {
        pullRequest(number: $pr) {
            url
            reviewDecision
            reviewThreads(first: 100) {
            edges {
                node {
                isResolved
                comments(first: 100) {
                    nodes {
                    author {
                        login
                    }
                    body
                    path
                    line
                    }
                }
                }
            }
            }
        }
        }
    }
"""

def unresolved(owner:str, repo:str, pr :str):
    text = subprocess.run(
        [
            'gh', 'api', 'graphql',
            '-f', f'owner={owner}', '-f', f'repo={repo}', '-F', f'pr={pr}', '-f', f'query={query}'
        ],
        capture_output=True,
        text=True,
    ).stdout.strip()

    res = json.loads(text)
    res = res['data']['repository']['pullRequest']['reviewThreads']['edges']

    for _, thread in enumerate(res):

        thread = thread['node']
        if thread['isResolved']:
            continue

        comment = thread['comments']['nodes'][0]

        filename = comment['path']
        lineno = comment['line'] or '?'
        body = '\\n'.join(str(comment['body']).splitlines())
        user = comment['author']['login'] 
        print(f"[{user}]{filename}:{lineno}: {body}")

diff('origin/develop')
branchrefs()
owner, repo, pr = prs()
unresolved(owner, repo, pr)
